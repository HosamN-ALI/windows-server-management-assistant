from fastapi import APIRouter, Depends, HTTPException
from typing import Dict, Any, Optional
from pydantic import BaseModel, HttpUrl

from app.core.security import get_current_active_user, require_admin_privileges
from app.services.pentest_service import PentestService
from app.dependencies import get_pentest_service

router = APIRouter(prefix="/pentest", tags=["pentest"])

class ZAPScanRequest(BaseModel):
    target_url: HttpUrl
    scan_type: str = "baseline"

class BurpScanRequest(BaseModel):
    target_url: HttpUrl
    scan_config: Dict[str, Any]

class SQLMapScanRequest(BaseModel):
    target_url: HttpUrl
    params: Dict[str, Any]

class AcunetixScanRequest(BaseModel):
    target_url: HttpUrl
    scan_profile: str

class SonarQubeRequest(BaseModel):
    project_path: str
    project_key: str

class DockerConfig(BaseModel):
    instance: str = "default"
    environment: Dict[str, str] = {}

@router.post("/zap/scan")
@require_admin_privileges()
async def run_zap_scan(
    request: ZAPScanRequest,
    current_user = Depends(get_current_active_user),
    pentest_service: PentestService = Depends(get_pentest_service)
):
    """Run OWASP ZAP scan"""
    return await pentest_service.run_zap_scan(
        str(request.target_url),
        request.scan_type,
        current_user.username
    )

@router.post("/burp/scan")
@require_admin_privileges()
async def run_burp_scan(
    request: BurpScanRequest,
    current_user = Depends(get_current_active_user),
    pentest_service: PentestService = Depends(get_pentest_service)
):
    """Run Burp Suite scan"""
    return await pentest_service.run_burp_scan(
        str(request.target_url),
        request.scan_config,
        current_user.username
    )

@router.post("/sqlmap/scan")
@require_admin_privileges()
async def run_sqlmap_scan(
    request: SQLMapScanRequest,
    current_user = Depends(get_current_active_user),
    pentest_service: PentestService = Depends(get_pentest_service)
):
    """Run SQLMap scan"""
    return await pentest_service.run_sqlmap_scan(
        str(request.target_url),
        request.params,
        current_user.username
    )

@router.post("/acunetix/scan")
@require_admin_privileges()
async def run_acunetix_scan(
    request: AcunetixScanRequest,
    current_user = Depends(get_current_active_user),
    pentest_service: PentestService = Depends(get_pentest_service)
):
    """Run Acunetix scan"""
    return await pentest_service.run_acunetix_scan(
        str(request.target_url),
        request.scan_profile,
        current_user.username
    )

@router.post("/sonarqube/analyze")
@require_admin_privileges()
async def run_sonarqube_analysis(
    request: SonarQubeRequest,
    current_user = Depends(get_current_active_user),
    pentest_service: PentestService = Depends(get_pentest_service)
):
    """Run SonarQube code analysis"""
    return await pentest_service.run_sonarqube_analysis(
        request.project_path,
        request.project_key,
        current_user.username
    )

@router.get("/containers")
async def list_containers(
    current_user = Depends(get_current_active_user),
    pentest_service: PentestService = Depends(get_pentest_service)
):
    """List running pentest tool containers"""
    return await pentest_service.get_docker_containers()

@router.post("/containers/{tool_name}/start")
@require_admin_privileges()
async def start_tool_container(
    tool_name: str,
    config: DockerConfig,
    current_user = Depends(get_current_active_user),
    pentest_service: PentestService = Depends(get_pentest_service)
):
    """Start a pentest tool container"""
    return await pentest_service.start_tool_container(
        tool_name,
        config.dict(),
        current_user.username
    )

@router.post("/containers/{container_id}/stop")
@require_admin_privileges()
async def stop_tool_container(
    container_id: str,
    current_user = Depends(get_current_active_user),
    pentest_service: PentestService = Depends(get_pentest_service)
):
    """Stop a pentest tool container"""
    return await pentest_service.stop_tool_container(
        container_id,
        current_user.username
    )
