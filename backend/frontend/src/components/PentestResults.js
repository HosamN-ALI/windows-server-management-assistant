import React, { useState, useEffect } from 'react';
import {
  Container,
  Grid,
  Paper,
  Typography,
  Box,
  Button,
  TextField,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Alert,
  List,
  ListItem,
  ListItemText,
  Card,
  CardContent,
  CardActions,
  Chip,
  LinearProgress,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControl,
  InputLabel,
  Select,
  MenuItem
} from '@mui/material';
import {
  Security,
  ExpandMore,
  PlayArrow,
  Stop,
  Refresh,
  Warning,
  Error,
  CheckCircle,
  Info
} from '@mui/icons-material';
import axios from 'axios';

function PentestResults() {
  const [scanResults, setScanResults] = useState([]);
  const [containers, setContainers] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [openDialog, setOpenDialog] = useState(false);
  const [dialogType, setDialogType] = useState('');
  const [scanConfig, setScanConfig] = useState({
    target_url: '',
    scan_type: 'baseline',
    tool: 'zap'
  });

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      setLoading(true);
      
      // Fetch container status
      const containersResponse = await axios.get('/pentest/containers');
      setContainers(containersResponse.data);
      
      setError(null);
    } catch (err) {
      console.error('Error fetching pentest data:', err);
      setError('Failed to load penetration testing data');
    } finally {
      setLoading(false);
    }
  };

  const handleStartScan = async () => {
    try {
      setLoading(true);
      let response;
      
      switch (scanConfig.tool) {
        case 'zap':
          response = await axios.post('/pentest/zap/scan', {
            target_url: scanConfig.target_url,
            scan_type: scanConfig.scan_type
          });
          break;
        case 'burp':
          response = await axios.post('/pentest/burp/scan', {
            target_url: scanConfig.target_url,
            scan_config: {}
          });
          break;
        case 'sqlmap':
          response = await axios.post('/pentest/sqlmap/scan', {
            target_url: scanConfig.target_url,
            params: {}
          });
          break;
        case 'acunetix':
          response = await axios.post('/pentest/acunetix/scan', {
            target_url: scanConfig.target_url,
            scan_profile: scanConfig.scan_type
          });
          break;
        default:
          throw new Error('Unsupported scan tool');
      }
      
      // Add result to scan results
      setScanResults(prev => [...prev, {
        id: Date.now(),
        tool: scanConfig.tool,
        target: scanConfig.target_url,
        timestamp: new Date(),
        ...response.data
      }]);
      
      setOpenDialog(false);
      setScanConfig({ target_url: '', scan_type: 'baseline', tool: 'zap' });
      
    } catch (err) {
      console.error('Error starting scan:', err);
      setError(`Failed to start ${scanConfig.tool} scan`);
    } finally {
      setLoading(false);
    }
  };

  const handleStartContainer = async (toolName) => {
    try {
      setLoading(true);
      await axios.post(`/pentest/containers/${toolName}/start`, {
        instance: 'default',
        environment: {}
      });
      await fetchData();
    } catch (err) {
      console.error('Error starting container:', err);
      setError(`Failed to start ${toolName} container`);
    } finally {
      setLoading(false);
    }
  };

  const handleStopContainer = async (containerId) => {
    try {
      setLoading(true);
      await axios.post(`/pentest/containers/${containerId}/stop`);
      await fetchData();
    } catch (err) {
      console.error('Error stopping container:', err);
      setError('Failed to stop container');
    } finally {
      setLoading(false);
    }
  };

  const getSeverityColor = (severity) => {
    switch (severity?.toLowerCase()) {
      case 'high':
      case 'critical':
        return 'error';
      case 'medium':
        return 'warning';
      case 'low':
        return 'success';
      default:
        return 'info';
    }
  };

  const getSeverityIcon = (severity) => {
    switch (severity?.toLowerCase()) {
      case 'high':
      case 'critical':
        return <Error />;
      case 'medium':
        return <Warning />;
      case 'low':
        return <CheckCircle />;
      default:
        return <Info />;
    }
  };

  const renderScanDialog = () => (
    <Dialog open={openDialog} onClose={() => setOpenDialog(false)} maxWidth="sm" fullWidth>
      <DialogTitle>Start Security Scan</DialogTitle>
      <DialogContent>
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 1 }}>
          <FormControl fullWidth>
            <InputLabel>Scan Tool</InputLabel>
            <Select
              value={scanConfig.tool}
              label="Scan Tool"
              onChange={(e) => setScanConfig({ ...scanConfig, tool: e.target.value })}
            >
              <MenuItem value="zap">OWASP ZAP</MenuItem>
              <MenuItem value="burp">Burp Suite</MenuItem>
              <MenuItem value="sqlmap">SQLMap</MenuItem>
              <MenuItem value="acunetix">Acunetix</MenuItem>
            </Select>
          </FormControl>
          
          <TextField
            label="Target URL"
            fullWidth
            value={scanConfig.target_url}
            onChange={(e) => setScanConfig({ ...scanConfig, target_url: e.target.value })}
            placeholder="https://example.com"
          />
          
          <FormControl fullWidth>
            <InputLabel>Scan Type</InputLabel>
            <Select
              value={scanConfig.scan_type}
              label="Scan Type"
              onChange={(e) => setScanConfig({ ...scanConfig, scan_type: e.target.value })}
            >
              <MenuItem value="baseline">Baseline Scan</MenuItem>
              <MenuItem value="full">Full Scan</MenuItem>
              <MenuItem value="api">API Scan</MenuItem>
            </Select>
          </FormControl>
        </Box>
      </DialogContent>
      <DialogActions>
        <Button onClick={() => setOpenDialog(false)}>Cancel</Button>
        <Button 
          onClick={handleStartScan}
          variant="contained"
          disabled={!scanConfig.target_url}
        >
          Start Scan
        </Button>
      </DialogActions>
    </Dialog>
  );

  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h4">
          <Security sx={{ mr: 1, verticalAlign: 'middle' }} />
          Penetration Testing
        </Typography>
        <Box>
          <Button
            startIcon={<Refresh />}
            variant="outlined"
            onClick={fetchData}
            disabled={loading}
            sx={{ mr: 1 }}
          >
            Refresh
          </Button>
          <Button
            startIcon={<PlayArrow />}
            variant="contained"
            onClick={() => setOpenDialog(true)}
            disabled={loading}
          >
            Start Scan
          </Button>
        </Box>
      </Box>

      {error && (
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
      )}

      {loading && <LinearProgress sx={{ mb: 3 }} />}

      <Grid container spacing={3}>
        {/* Tool Containers */}
        <Grid item xs={12} md={6}>
          <Paper sx={{ p: 2 }}>
            <Typography variant="h6" gutterBottom>Security Tools</Typography>
            
            <Grid container spacing={2}>
              {['zap', 'burp', 'sqlmap'].map((tool) => {
                const container = containers.find(c => c.name.includes(tool));
                const isRunning = container?.status === 'running';
                
                return (
                  <Grid item xs={12} sm={6} key={tool}>
                    <Card>
                      <CardContent>
                        <Typography variant="h6" sx={{ textTransform: 'uppercase' }}>
                          {tool === 'zap' ? 'OWASP ZAP' : tool === 'burp' ? 'Burp Suite' : 'SQLMap'}
                        </Typography>
                        <Chip
                          icon={isRunning ? <CheckCircle /> : <Stop />}
                          label={isRunning ? 'Running' : 'Stopped'}
                          color={isRunning ? 'success' : 'default'}
                          size="small"
                        />
                      </CardContent>
                      <CardActions>
                        {isRunning ? (
                          <Button
                            size="small"
                            startIcon={<Stop />}
                            onClick={() => handleStopContainer(container.id)}
                          >
                            Stop
                          </Button>
                        ) : (
                          <Button
                            size="small"
                            startIcon={<PlayArrow />}
                            onClick={() => handleStartContainer(tool)}
                          >
                            Start
                          </Button>
                        )}
                      </CardActions>
                    </Card>
                  </Grid>
                );
              })}
            </Grid>
          </Paper>
        </Grid>

        {/* Recent Scans */}
        <Grid item xs={12} md={6}>
          <Paper sx={{ p: 2 }}>
            <Typography variant="h6" gutterBottom>Recent Scans</Typography>
            
            {scanResults.length === 0 ? (
              <Typography variant="body2" color="textSecondary">
                No scans performed yet. Start a scan to see results here.
              </Typography>
            ) : (
              <List>
                {scanResults.slice(-5).reverse().map((result) => (
                  <ListItem key={result.id}>
                    <ListItemText
                      primary={`${result.tool.toUpperCase()} - ${result.target}`}
                      secondary={
                        <Box>
                          <Typography variant="body2">
                            {result.timestamp.toLocaleString()}
                          </Typography>
                          <Chip
                            label={result.success ? 'Completed' : 'Failed'}
                            color={result.success ? 'success' : 'error'}
                            size="small"
                          />
                        </Box>
                      }
                    />
                  </ListItem>
                ))}
              </List>
            )}
          </Paper>
        </Grid>

        {/* Scan Results Details */}
        <Grid item xs={12}>
          <Paper sx={{ p: 2 }}>
            <Typography variant="h6" gutterBottom>Scan Results</Typography>
            
            {scanResults.length === 0 ? (
              <Alert severity="info">
                No scan results available. Start a security scan to view detailed findings.
              </Alert>
            ) : (
              scanResults.map((result) => (
                <Accordion key={result.id}>
                  <AccordionSummary expandIcon={<ExpandMore />}>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                      <Typography variant="h6">
                        {result.tool.toUpperCase()} - {result.target}
                      </Typography>
                      <Chip
                        label={result.success ? 'Completed' : 'Failed'}
                        color={result.success ? 'success' : 'error'}
                        size="small"
                      />
                      <Typography variant="body2" color="textSecondary">
                        {result.timestamp.toLocaleString()}
                      </Typography>
                    </Box>
                  </AccordionSummary>
                  <AccordionDetails>
                    {result.findings && result.findings.length > 0 ? (
                      <List>
                        {result.findings.map((finding, index) => (
                          <ListItem key={index}>
                            <ListItemText
                              primary={
                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                  {getSeverityIcon(finding.severity)}
                                  <Typography variant="body1">
                                    {finding.title || finding.description}
                                  </Typography>
                                  <Chip
                                    label={finding.severity || 'Unknown'}
                                    color={getSeverityColor(finding.severity)}
                                    size="small"
                                  />
                                </Box>
                              }
                              secondary={finding.description || finding.details}
                            />
                          </ListItem>
                        ))}
                      </List>
                    ) : (
                      <Typography variant="body2" color="textSecondary">
                        No security issues found or scan is still in progress.
                      </Typography>
                    )}
                  </AccordionDetails>
                </Accordion>
              ))
            )}
          </Paper>
        </Grid>
      </Grid>

      {renderScanDialog()}
    </Container>
  );
}

export default PentestResults;
